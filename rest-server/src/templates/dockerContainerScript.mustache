#!/bin/bash

# Copyright (c) Microsoft Corporation
# All rights reserved.
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
# to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# Bootstrap script for docker container.

exec 17>/pai/log/DockerContainerDebug.log
BASH_XTRACEFD=17

function exit_handler()
{
  printf "%s %s\n" \
    "[DEBUG]" "Docker container exit handler: EXIT signal received in docker container, exiting ..."
  kill 0
}

set -x
PS4="+[\t] "
trap exit_handler EXIT


touch "/alive/docker_$PAI_CONTAINER_ID"
while /bin/true; do
  [ $(( $(date +%s) - $(stat -c %Y /alive/yarn_$PAI_CONTAINER_ID) )) -gt 60 ] \
    && pkill -9 --ns 1
  sleep 20
done &


export PAI_WORK_DIR="$(pwd)"
WEB_HDFS_PREFIX={{{ webHdfsUri }}}/Container
HDFS_PREFIX={{{ hdfsUri }}}/Container
export CLASSPATH="$(hadoop classpath --glob)"

task_role_no={{{ idx }}}

printf "%s %s\n%s\n\n" "[INFO]" "ENV" "$(printenv | sort)"

mv /pai/code/* ./

function webhdfs_create_file()
{
  webHdfsRequestPath=${0}
  echo "[CAN-TEST-webhdfs_create_file] webHdfsPath = $webHdfsRequestPath"
}

function prepare_ssh()
{
  mkdir /root/.ssh
  sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
  sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
}

function start_ssh_service()
{
  printf "%s %s\n" \
    "[INFO]" "start ssh service"
  cat /root/.ssh/{{{ jobData.userName }}}.pub >> /root/.ssh/authorized_keys
  sed -i 's/Port.*/Port '$PAI_CONTAINER_SSH_PORT'/' /etc/ssh/sshd_config
  echo "sshd:ALL" >> /etc/hosts.allow
  service ssh restart
}

function get_ssh_key_files()
{
  info_source="webhdfs"
  localKeyPath='/root/.ssh/'{{{jobData.jobName}}}'.pub'

  echo "[CAN-TEST] localKeyPath = $localKeyPath"
  echo "[CAN-TEST] webHdfsUri =" {{{ webHdfsUri }}}
  echo "[CAN-TEST] jobData.name =" {{{ jobData.jobName }}}
  echo "[CAN-TEST] jobData.userName =" {{{ jobData.userName }}}
  if [[ -f $localKeyPath ]]; then
    rm -f $localKeyPath
  fi

  if [[ "$info_source" = "webhdfs" ]]; then
    $webHdfsKeyPath = {{{ webHdfsUri }}}'/webhdfs/Container/'{{{ jobData.userName }}}'/'{{{ jobData.joName }}}'/ssh/keyFiles/'{{{ jobData.jobName }}}'.pub'
    echo "[CAN-TEST] webHdfsKeyPath = $webHdfsKeyPath"
    # $(curl -L -o $webHdfsKeyPath $localKeyPath)
  else
    printf "%s %s\n" \
      "[WARNING]" "Get another key store way"
  fi
}

function generate_ssh_connect_info()
{
  info_source="webhdfs"
  dest_file_name=${0}

  if [[ "$info_source" = "webhdfs" ]]; then
    webHdfsRequestPath = $dest_file_name
    echo "[CAN-TEST] webHdfsRequestPath = $webHdfsRequestPath"
    echo "[CAN-TEST] dest_file_name = $dest_file_name"
    echo "[CAN-TEST] webHdfsUri =" {{{ webHdfsUri }}}
    echo "[CAN-TEST] jobData.name =" {{{ jobData.jobName }}}
    webhdfs_create_file $webHdfsRequestPath
    # $(curl -i -X PUT "$webHdfsRequestPath?op=MKDIRS")
  else
    printf "%s %s\n" \
      "[WARNING]" "Get another key store way"
  fi
}

# Check whether hdfs bianry and ssh exists, if not ignore ssh preparation and start part
# Start sshd in docker container
if which hdfs && service --status-all 2>&1 | grep -q ssh; then
  prepare_ssh
  get_ssh_key_files

  ssh_connect_info_folder=${WEB_HDFS_PREFIX}/${PAI_USER_NAME}/${PAI_JOB_NAME}/ssh/'connect'
  # Generate ssh connect info file in "PAI_CONTAINER_ID-PAI_CURRENT_CONTAINER_IP-PAI_CONTAINER_SSH_PORT" format on hdfs
  dest_file_path=${ssh_connect_info_folder}/$PAI_CONTAINER_ID-$PAI_CONTAINER_HOST_IP-$PAI_CONTAINER_SSH_PORT

  generate_ssh_connect_info ${dest_file_path}

  # For MPI job
  # Generate ssh config
  ssh_config_path=${HDFS_PREFIX}/${PAI_USER_NAME}/${PAI_JOB_NAME}/ssh/config


  hdfs dfs -mkdir -p ${ssh_config_path}
  hdfs dfs -touchz ${ssh_config_path}/$APP_ID+$PAI_CURRENT_TASK_ROLE_NAME+$PAI_CURRENT_TASK_ROLE_CURRENT_TASK_INDEX+$PAI_CONTAINER_HOST_IP+$PAI_CONTAINER_SSH_PORT
  while [ `hdfs dfs -ls $ssh_config_path | grep "/$PAI_JOB_NAME/ssh/config/$APP_ID+" | wc -l` -lt  $PAI_JOB_TASK_COUNT ]; do
    printf "%s %s\n" "[INFO]" "Waiting for ssh service in other containers ..."
    sleep 10
  done
  NodeList=($(hdfs dfs -ls ${ssh_config_path} \
    | grep "/$PAI_JOB_NAME/ssh/config/$APP_ID+" \
    | grep -oE "[^/]+$" \
    | sed -e "s/^$APP_ID+//g" \
    | sort -n))
  if [ "${#NodeList[@]}" -ne $PAI_JOB_TASK_COUNT ]; then
    printf "%s %s\n%s\n%s\n\n" \
      "[ERROR]" "NodeList" \
      "${NodeList[@]}" \
      "ssh services in ${#NodeList[@]} containers are available, not equal to $PAI_JOB_TASK_COUNT, exit ..."
    exit 2
  fi
  for line in "${NodeList[@]}"; do
    node=(${line//+/ });
    printf "%s\n  %s\n  %s\n  %s\n  %s\n  %s\n  %s\n" \
      "Host ${node[0]}-${node[1]}" \
      "HostName ${node[2]}" \
      "Port ${node[3]}" \
      "User root" \
      "StrictHostKeyChecking no" \
      "UserKnownHostsFile /dev/null" \
      "IdentityFile /root/.ssh/$APP_ID" >> /root/.ssh/config
  done

  # Start ssh service
  start_ssh_service
fi

# Write env to system-wide environment
env | grep -E "^PAI|PATH|PREFIX|JAVA|HADOOP|NVIDIA|CUDA" > /etc/environment

printf "%s %s\n\n" "[INFO]" "USER COMMAND START"
{{{ taskData.command }}} || exit $?
printf "\n%s %s\n\n" "[INFO]" "USER COMMAND END"

exit 0
